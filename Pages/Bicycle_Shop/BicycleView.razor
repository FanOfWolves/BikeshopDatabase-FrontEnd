@page "/bicycles"
@using System.Net.Http
@using System.Collections.Generic
@inject HttpClient HttpLib
@inject IToastService toasterService;

    <div class="row row-height" style="max-height: 90%;">
        <div class="col-3 px-md-5 card card-body bg-light" style="max-height: 90%;">
            <h4>Filters</h4>
            <div class="card mb-1">
                <div class="card-header">
                    Model Type
                </div>
                <div class="card-body">
                    @foreach(var item in filter_modelTypes) {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="model-type" id="@item" value="@item" @onchange="ModelTypeSelection" checked=@(filter_ModelType.Equals(@item, StringComparison.OrdinalIgnoreCase))>
                            <label class="form-check-label" for="model-type">
                                @item
                            </label>
                        </div>
                    }

                </div>
            </div>

            <div class="card mb-1">
                <div class="card-header">
                    Construction
                </div>
                <div class="card-body">
                    @foreach(var item in filter_construction) {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="construction-type" id="item" value="@item" @onchange="ConstructionTypeSelection" checked=@(filter_Construction.Equals(@item, StringComparison.OrdinalIgnoreCase))>
                            <label class="form-check-label" for="construction-type">
                                @item
                            </label>
                        </div>
                    }
                </div>
            </div>


            <div class="card mb-1">
                <div class="card-header">
                    Pricing
                </div>
                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>Min</label>
                            <input type="number" class="form-control" id="priceMin" placeholder="$0">
                        </div>

                        <div class="form-group col-md-6 text-right">
                            <label>Max</label>
                            <input type="number" class="form-control" id="priceMax" placeholder="$1,000">
                        </div>
                    </div>

                    <button class='btn btn-outline-success w-100'>Save Changes</button>

                </div>
            </div>

            <button class="btn btn-outline-secondary mb-1" @onclick="ClearFilters">Clear Filters</button>
            <button class="btn btn-outline-primary" @onclick="ApplyChanges">Apply Changes</button>
            
        </div>
        <div class="col-9 px-md-5 left card card-body bg-light" style="max-height: 90%">

            @if(bicycles == null) {
                <p>Loading bicycles...</p>
            } else {
                <div class="card-deck">
                    @foreach(var bike in bicycles) {
                        <div class="card m-1" style="min-width: 18rem; max-width:33.0%;">
                            <div class="card-header">
                                <h5 class="card-title">@bike.Modeltype<span class="badge badge-pill badge-primary float-right">$@bike.Listprice</span></h5>
                            </div>
                            <div class="card-body">
                                <h6><span class="badge badge-pill badge-secondary">@bike.Construction</span> <span class="badge badge-pill badge-secondary" style="background-color: @((bike?.Paint?.Colorlist ?? "NONE"))">@((bike?.Paint?.Colorlist ?? "N/A"))</span> <span class="badge badge-pill badge-secondary">@bike.Framesize FRAMESIZE</span></h6>
                                <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                                <a href="#" class="btn btn-outline-primary">View</a>
                                <a href="#" class="btn btn-outline-success" @onclick:preventDefault @onclick='( () => toasterService.ShowError("You must be logged in to this."))'>Add To Cart</a>
                            </div>
                        </div>
                    }
                </div>
            }

            <div class="row justify-content-center">
            <div class="col-12 justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(pageNumber == 1 ? "disabled" : null)"><a class="page-link " href="#/" @onclick="@(async () => await PreviousPage())" @onclick:preventDefault>Previous</a></li>
                        @for(int i = pageNumber - 2; i < pageNumber + 2; i++) {
                            int buttonNumber = i;
                            if(i < 1) continue;
                            @if (i == pageNumber)
                            {
                                <li class="page-item active"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                            }
                            else
                            {
                                <li class="page-item"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                            }
                        }
                        <li class="page-item"><a class="page-link" href="#/" @onclick="@(async () => await NextPage())" @onclick:preventDefault>Next</a></li>
                    </ul>
                </nav>

            </div>

        </div>
        

        </div>
    </div>
<div class="row">
</div>
@code {

    Bicycle[] bicycles;

    public string filter_ModelType { get; set; } = "";
    public string filter_Construction { get; set; } = "";

    private int pageSize = 20;
    private int pageNumber = 1;
    public List<string> filter_modelTypes = new List<string>() {"Hybrid", "Mountain", "Race", "Road", "Tour", "Track"};
    public List<string> filter_construction = new List<string>() {"Tig Welded", "Welded", "Bonded"};

    protected override async Task OnInitializedAsync() {

        var bicycleList = await HttpLib.GetFromJsonAsync<Bicycle[]>($"api/bicycles?pageNumber={pageNumber}&pageSize={pageSize}");

        if(bicycleList.Any()) {
            bicycles = bicycleList;
        }
        
        
    }

    private async Task<Bicycle[]> Paginate() {
        var apiRoute = $"api/bicycles?pageNumber={pageNumber}&pageSize={pageSize}";

        if (!string.IsNullOrEmpty(filter_Construction))
        {
            apiRoute = QueryHelpers.AddQueryString(apiRoute, "construction", filter_Construction);
        }

        if (!string.IsNullOrEmpty(filter_ModelType))
        {
            apiRoute = QueryHelpers.AddQueryString(apiRoute, "modeltype", filter_ModelType);
        }

        return await HttpLib.GetFromJsonAsync<Bicycle[]>(apiRoute);
    }

    public async Task PreviousPage() {

        pageNumber--;

        if(pageNumber <= 0)
            pageNumber = 1;

        bicycles = await Paginate();
    }

    public async Task NextPage() {
        pageNumber++;

        Math.Clamp(pageNumber, 1, 99);

        bicycles = await Paginate();
    }

    public async Task ChoosePage(int pageClick) {
        pageNumber = pageClick;
        bicycles = await Paginate();
    }

    public async Task ApplyChanges()
    {
        pageNumber = 1;
        bicycles = await Paginate();
    }

    public async Task ClearFilters()
    {
        filter_Construction = "";
        filter_ModelType = "";

        pageNumber = 1;
        pageSize = 10;

        bicycles = await Paginate();
    }


    /// Radio checkbox handlers
    
    void ModelTypeSelection(ChangeEventArgs args)
    {
        filter_ModelType = args.Value.ToString();
    }

    void ConstructionTypeSelection(ChangeEventArgs args)
    {
        filter_Construction = args.Value.ToString();
    }
}