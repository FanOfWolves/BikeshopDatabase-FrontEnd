@page "/dashboard/parts"
@using System.Net.Http
@inject HttpClient HttpLib
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager

<h1>Components</h1>

<a href="dashboard/part/create">Create Components</a>

@if(ComponentList != null) {
    <div class="card bg-light">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ComponentID</th>
                <th>Product</th>
                <th>Category</th>
                <th>Inventory</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var component in ComponentList) {
                <tr>
                    <td>@component.Componentid</td>
                    <td>@component.Productint</td>
                    <td>@component.Category</td>
                    <td>@component.Quantityonhand</td>
                    <td>
                        <div class="btn-group w-100">
                            <button type="button" class="btn btn-outline-primary" @onclick="@( () => NavigationManager.NavigateTo("component/view/" + @component.Componentid) )">View</button>
                            <button type="button" class="btn btn-outline-success" @onclick="@( () => NavigationManager.NavigateTo("component/edit/" + @component.Componentid) )">Edit</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="row justify-content-center">
        <div class="col justify-content-center">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(pageNumber == 1 ? "disabled" : null)"><a class="page-link " href="#/" @onclick="@(async () => await PreviousPage())" @onclick:preventDefault>Previous</a></li>
                    @for(int i = pageNumber - 2; i < pageNumber + 2; i++) {
                        int buttonNumber = i;
                        if(i < 1) continue;
                        @if(i == pageNumber) {
                            <li class="page-item active"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                        } else {
                            <li class="page-item @(ComponentList == null || i >= pageNumber && ComponentList.Count() < pageSize ? "disabled" : null)"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                        }
                    }
                    <li class="page-item @(ComponentList == null || ComponentList.Count() < pageSize ? "disabled" : null)"><a class="page-link" href="#/" @onclick="@(async () => await NextPage())" @onclick:preventDefault>Next</a></li>
                </ul>
            </nav>

        </div>
    </div>
    </div>


} else {
    <p>Loading Components...</p>
}





@code {

    private int pageSize = 10;
    private int pageNumber = 1;
    private Component[] ComponentList;

    private Component Component;

    private Random random = new Random();

    protected override async Task OnInitializedAsync() {
        var componentList = await HttpLib.GetFromJsonAsync<Component[]>($"api/component?pageNumber={pageNumber}&pageSize={pageSize}");

        if(componentList.Any()) {
            ComponentList = componentList;
        }

    }

    private async Task<Component[]> Paginate() {
        return await HttpLib.GetFromJsonAsync<Component[]>($"api/component?pageNumber={pageNumber}&pageSize={pageSize}");
    }

    public async Task RandomCustomer() {
        Component = await HttpLib.GetFromJsonAsync<Component>("api/customer/" + random.Next(1, 5000).ToString());
    }

    public async Task PreviousPage() {

        pageNumber--;

        if(pageNumber <= 0)
            pageNumber = 1;

        ComponentList = await Paginate();
    }

    public async Task NextPage() {
        pageNumber++;

        Math.Clamp(pageNumber, 1, 99);

        ComponentList = await Paginate();
    }

    public async Task ChoosePage(int pageClick) {
        pageNumber = pageClick;
        ComponentList = await Paginate();
    }

}
