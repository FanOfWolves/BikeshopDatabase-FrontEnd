@page "/customers"
@using System.Net.Http
@inject HttpClient HttpLib
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager

<h1>Customer</h1>


@if(CustomerList != null) {

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Address</th>
                <th>Balance</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var cust in CustomerList) {
                <tr>
                    <td>@cust.Customerid</td>
                    <td>@cust.Firstname @cust.Lastname</td>
                    @if(@cust.Address == "0") {
                        <td>No address record </td>
                    } else {
                        <td>@cust.Address</td>
                    }
                    <td>$@cust.Balancedue</td>
                    <td>
                        <div class="btn-group w-100">
                            <button type="button" class="btn btn-outline-primary" @onclick="@( () => NavigationManager.NavigateTo("customers/view/" + @cust.Customerid) )">View</button>
                            <button type="button" class="btn btn-outline-success">Edit</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="row justify-content-center">
        <div class="col justify-content-center">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    <li class="page-item"><a class="page-link" href="#/" @onclick="@(async () => await PreviousPage())" @onclick:preventDefault>Previous</a></li>
                    @for(int i = pageNumber-2; i < pageNumber + 2; i++) {
                        int buttonNumber = i;
                        if(i < 1) continue;
                        <li class="page-item"><a class="page-link" href="#/" @onclick="@(async () => await ChoosePage(buttonNumber))" @onclick:preventDefault>@buttonNumber</a></li>
                    }
                    <li class="page-item"><a class="page-link" href="#/" @onclick="@(async () => await NextPage())" @onclick:preventDefault>Next</a></li>
                </ul>
            </nav>

        </div>
    </div>



} else {
    <p>Loading Customers...</p>
}



@if(Customer != null) {
    <p>@Customer.Firstname @Customer.Lastname - @Customer.Address (Balance: $@Customer.Balancedue)</p>
}

@code {

    private int pageSize = 10;
    private int pageNumber = 1;
    private Customer[] CustomerList;

    private Customer Customer;

    private Random random = new Random();

    protected override async Task OnInitializedAsync() {
        var customerList = await HttpLib.GetFromJsonAsync<Customer[]>($"api/customer?pageNumber={pageNumber}&pageSize={pageSize}");

        if(customerList.Any()) {
            CustomerList = customerList;
        }

    }

    private async Task<Customer[]> Paginate() {
        return await HttpLib.GetFromJsonAsync<Customer[]>($"api/customer?pageNumber={pageNumber}&pageSize={pageSize}");
    }

    public async Task RandomCustomer() {
        Customer = await HttpLib.GetFromJsonAsync<Customer>("api/customer/" + random.Next(1, 5000).ToString());
    }

    public async Task PreviousPage() {

        pageNumber--;

        if(pageNumber <= 0)
            pageNumber = 1;

        CustomerList = await Paginate();
    }

    public async Task NextPage() {
        pageNumber++;

        Math.Clamp(pageNumber, 1, 99);

        CustomerList = await Paginate();
    }

    public async Task ChoosePage(int pageClick) {
        pageNumber = pageClick;
        CustomerList = await Paginate();
    }

}
