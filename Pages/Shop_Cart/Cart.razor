@page "/Cart"
@inject SweetAlertService Swal;
@implements IDisposable
<p>Current Bikes:</p>
<div class="col-9 left card card-body bg-light" style="max-height: 90%">

    @if(UserContainer.CartBikes == null) {
        <p>Loading bicycles...</p>
    } else {
        <div class="card-deck">
            @if(loggedIn) {
                @foreach(var bike in UserContainer.CartBikes) {
                    <div class="card m-1" style="min-width: 18rem; max-width:33.0%;">
                        <div class="card-header">
                            <h5 class="card-title">@bike.Modeltype<span class="badge badge-pill badge-primary float-right">$@bike.Listprice</span></h5>
                        </div>
                        <div class="card-body">
                            <h6><span class="badge badge-pill badge-secondary">@bike.Construction</span> <span class="badge badge-pill badge-secondary" style="background-color: @((bike?.Paint?.Colorlist ?? "NONE"))">@((bike?.Paint?.Colorlist ?? "N/A"))</span> <span class="badge badge-pill badge-secondary">@bike.Framesize FRAMESIZE</span></h6>
                            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                            <a href="#" class="btn btn-outline-primary">View</a>
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteBicycle(bike)">Delete Bicycle</button>
                        </div>
                    </div>
                }
            } else {
                <h5>Please <a href="/login">log in</a> to view your cart!</h5>
            }
        </div>
    }


</div>

@code {

    private int pageSize = 20;
    private int pageNumber = 1;
    [CascadingParameter] private Task<AuthenticationState> authStateTask { get; set; }
    bool loggedIn = false;
    protected async override Task OnInitializedAsync() {
        var authState = await authStateTask;
        var user = authState.User;
        if(user.Identity.IsAuthenticated) {
            loggedIn = true;
            if(await localStore.ContainKeyAsync(user.Identity.Name)) {
                var json = await localStore.GetItemAsStringAsync(user.Identity.Name);
                UserContainer = JsonConvert.DeserializeObject<StateContainer>(json);
            }
        }
    }

    protected override void OnInitialized() {

        UserContainer.OnChange += StateHasChanged;
        this.StateHasChanged();
    }
    public void Dispose() {
        UserContainer.OnChange -= StateHasChanged;
    }

    public async void DeleteBicycle(Bicycle bicycle) {
        if(UserContainer.CartBikes.Contains(bicycle)) {
            UserContainer.RemoveBicycle(bicycle);
            await localStore.SetItemAsync<StateContainer>("UserName", UserContainer);
            await Swal.FireAsync("", "Removed from cart!", SweetAlertIcon.Success);
        } else {
            await Swal.FireAsync("", "Error occurred...", SweetAlertIcon.Error);
        }
    }
}
