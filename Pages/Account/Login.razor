@page "/login"
@using Models.account
@inject IAuthService AuthService
@inject NavigationManager NavigationManager



@if(ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="container">

    <h1>Login</h1>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Username</label>
                    <InputText Id="email" Class="form-control" @bind-Value="loginModel.Username" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <button type="submit" class="btn btn-primary" disabled="@isLoading">@BtnText</button>
            </EditForm>
        </div>
    </div>
</div>


@code
{
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    public bool isLoading = false;

    public string BtnText = "Login";

    private async Task HandleLogin()
    {
        isLoading = true;
        ShowErrors = false;
        BtnText = "Logging in...";
        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("");;
        }
        else
        {
            Error = result.message;
            ShowErrors = true;
            isLoading = false;
            BtnText = "Login";
        }
    }
}